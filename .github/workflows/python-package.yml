# Workflow will use Python 3.8 in lint stages using flake8, black and pydocstyle, unittest stage using pytest and pages stage using Sphinx
name: python-lint-test-pages

on:
  push:
    branches:
      - main

jobs:
  # lint:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: [3.8]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python 3.8
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         # Optional - x64 or x86 architecture, defaults to x64
  #         architecture: 'x64'

  #     # You can test your matrix by printing the current Python version
  #     - name: Display Python version
  #       run: python -c "import sys; print(sys.version)"

  #     - name: Install dependencies
  #       run: |
  #         pip install --upgrade pip --quiet
  #         pip install flake8==3.9.0 --quiet
  #         pip install black==22.3.0 --quiet
  #         pip install pydocstyle==6.0.0 --quiet
  #         pip install pipenv==2022.1.8 --quiet

  #     - name: flake8
  #       run:
  #         python -m flake8 . --ignore=E203,E266,E501,W503,F403,F401 --max-complexity=20 --max-line-length=88 --select=B,C,E,F,W,T4,B9

  #     - name: black
  #       run:
  #         python -m black . --check --verbose

  #     - name: pydocstyle
  #       run:
  #         python -m pydocstyle . --convention=google
  run-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: Lint Code Base
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_JSCPD: false
          VALIDATE_PYTHON_MYPY: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # unittest:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: [3.8]
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set up Python 3.8
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #         # Optional - x64 or x86 architecture, defaults to x64
  #         architecture: 'x64'

  #     # You can test your matrix by printing the current Python version
  #     - name: Display Python version
  #       run: python -c "import sys; print(sys.version)"

  #     - name: unittest
  #       run: |
  #         echo 'No Unit Test Found'
# apt-get update --quiet
# apt-get upgrade -y --quiet
# apt-get install build-essential libssl-dev libffi-dev python3-dev -y --quiet
# pip install --upgrade pip --quiet
# pip install -r requirements.txt --quiet
# pip install pytest --quiet
# pip install . --quiet
# python -m pytest

  pages:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        # Optional - x64 or x86 architecture, defaults to x64
        architecture: 'x64'

      # You can test your matrix by printing the current Python version
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"

    - name: Sphinx Pages
      run: |
        pip install --upgrade pip --quiet
        pip install -r requirements.txt --quiet
        sphinx-build -b html docs/source docs/build/html

    - name: Upload artifacts
      uses: actions/upload-artifact@v1
      with:
        name: html-docs
        path: docs/build/html

    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: docs/build/html